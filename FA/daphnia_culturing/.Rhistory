plot(dist.data[,clad.cols[i]], type="l", ylab=colnames(dist.data[clad.cols[i]]), xlab="", col="blue")
}
}
par(mar=c(4,4,4,4))
par(mfrow=c(1,1))
par(mar=c(0,5,0,0))
par(mfrow=c(10,1))
for(i in 1:10)
{
if (substr(colnames(dist.data[clad.cols[i]]),5,5)==1)
{
plot(dist.data[,clad.cols[i]], type="l", ylab=colnames(dist.data[clad.cols[i]]), xlab="", col="black")
}
else if (substr(colnames(dist.data[clad.cols[i]]),5,5)==2)
{
plot(dist.data[,clad.cols[i]], type="l", ylab=colnames(dist.data[clad.cols[i]]), xlab="", col="red")
}
else if (substr(colnames(dist.data[clad.cols[i]]),5,5)==3)
{
plot(dist.data[,clad.cols[i]], type="l", ylab=colnames(dist.data[clad.cols[i]]), xlab="", col="green")
axis(side=1, at=c(4,6,10,12,16,20,22,26,28,30,33,34,35,38,41,44,46,50,52,53,59),
labels=dist.data$FA_name[c(4,6,10,12,16,20,22,26,28,30,33,34,35,38,41,44,46,50,52,53,59)], las=2)
}
else if (substr(colnames(dist.data[clad.cols[i]]),5,5)==4)
{
plot(dist.data[,clad.cols[i]], type="l", ylab=colnames(dist.data[clad.cols[i]]), xlab="", col="blue")
}
}
par(mar=c(4,4,4,4))
par(mfrow=c(1,1))
par(mar=c(0,5,0,0))
par(mfrow=c(10,1))
for(i in 1:10)
{
if (substr(colnames(dist.data[clad.cols[i]]),5,5)==1)
{
plot(dist.data[,clad.cols[i]], type="l", ylab=colnames(dist.data[clad.cols[i]]), xlab="", col="black")
}
else if (substr(colnames(dist.data[clad.cols[i]]),5,5)==2)
{
plot(dist.data[,clad.cols[i]], type="l", ylab=colnames(dist.data[clad.cols[i]]), xlab="", col="red")
}
else if (substr(colnames(dist.data[clad.cols[i]]),5,5)==3)
{
plot(dist.data[,clad.cols[i]], type="l", ylab=colnames(dist.data[clad.cols[i]]), xlab="", col="green")
axis(side=1, at=c(4,7,8,10,12,14,16,17,18,22,26,28,29,32,33,34,35,38,41,44,50,52,58),
labels=dist.data$FA_name[c(4,6,10,12,16,20,22,26,28,30,33,34,35,38,41,44,46,50,52,53,59)], las=2)
}
else if (substr(colnames(dist.data[clad.cols[i]]),5,5)==4)
{
plot(dist.data[,clad.cols[i]], type="l", ylab=colnames(dist.data[clad.cols[i]]), xlab="", col="blue")
}
}
par(mar=c(4,4,4,4))
par(mfrow=c(1,1))
par(mar=c(0,5,0,0))
par(mfrow=c(10,1))
for(i in 1:10)
{
if (substr(colnames(dist.data[clad.cols[i]]),5,5)==1)
{
plot(dist.data[,clad.cols[i]], type="l", ylab=colnames(dist.data[clad.cols[i]]), xlab="", col="black")
}
else if (substr(colnames(dist.data[clad.cols[i]]),5,5)==2)
{
plot(dist.data[,clad.cols[i]], type="l", ylab=colnames(dist.data[clad.cols[i]]), xlab="", col="red")
}
else if (substr(colnames(dist.data[clad.cols[i]]),5,5)==3)
{
plot(dist.data[,clad.cols[i]], type="l", ylab=colnames(dist.data[clad.cols[i]]), xlab="", col="green")
axis(side=1, at=c(4,7,8,10,12,14,16,17,18,22,26,28,29,32,33,34,35,38,41,44,50,52,58),
labels=dist.data$FA_name[c(4,7,8,10,12,14,16,17,18,22,26,28,29,32,33,34,35,38,41,44,50,52,58)], las=2)
}
else if (substr(colnames(dist.data[clad.cols[i]]),5,5)==4)
{
plot(dist.data[,clad.cols[i]], type="l", ylab=colnames(dist.data[clad.cols[i]]), xlab="", col="blue")
}
}
par(mar=c(4,4,4,4))
par(mfrow=c(1,1))
par(mar=c(0,5,0,0))
par(mfrow=c(10,1))
for(i in 1:10)
{
if (substr(colnames(dist.data[clad.cols[i]]),5,5)==1)
{
plot(dist.data[,clad.cols[i]], type="l", ylab=colnames(dist.data[clad.cols[i]]), xlab="", col="black")
}
else if (substr(colnames(dist.data[clad.cols[i]]),5,5)==2)
{
plot(dist.data[,clad.cols[i]], type="l", ylab=colnames(dist.data[clad.cols[i]]), xlab="", col="red")
}
else if (substr(colnames(dist.data[clad.cols[i]]),5,5)==3)
{
plot(dist.data[,clad.cols[i]], type="l", ylab=colnames(dist.data[clad.cols[i]]), xlab="", col="green")
axis(side=1, at=c(4,8,9,10,12,14,16,17,18,22,26,28,29,32,33,34,35,38,41,44,50,52,58),
labels=dist.data$FA_name[c(4,7,8,10,12,14,16,17,18,22,26,28,29,32,33,34,35,38,41,44,50,52,58)], las=2)
}
else if (substr(colnames(dist.data[clad.cols[i]]),5,5)==4)
{
plot(dist.data[,clad.cols[i]], type="l", ylab=colnames(dist.data[clad.cols[i]]), xlab="", col="blue")
}
}
par(mar=c(4,4,4,4))
par(mfrow=c(1,1))
par(mar=c(0,5,0,0))
par(mfrow=c(10,1))
for(i in 1:10)
{
if (substr(colnames(dist.data[clad.cols[i]]),5,5)==1)
{
plot(dist.data[,clad.cols[i]], type="l", ylab=colnames(dist.data[clad.cols[i]]), xlab="", col="black")
}
else if (substr(colnames(dist.data[clad.cols[i]]),5,5)==2)
{
plot(dist.data[,clad.cols[i]], type="l", ylab=colnames(dist.data[clad.cols[i]]), xlab="", col="red")
}
else if (substr(colnames(dist.data[clad.cols[i]]),5,5)==3)
{
plot(dist.data[,clad.cols[i]], type="l", ylab=colnames(dist.data[clad.cols[i]]), xlab="", col="green")
axis(side=1, at=c(4,8,9,10,12,14,16,17,18,22,26,28,29,32,33,34,35,38,41,44,50,52,58),
labels=dist.data$FA_name[c(4,8,9,10,12,14,16,17,18,22,26,28,29,32,33,34,35,38,41,44,50,52,58)], las=2)
}
else if (substr(colnames(dist.data[clad.cols[i]]),5,5)==4)
{
plot(dist.data[,clad.cols[i]], type="l", ylab=colnames(dist.data[clad.cols[i]]), xlab="", col="blue")
}
}
par(mar=c(4,4,4,4))
par(mfrow=c(1,1))
par(mar=c(0,5,0,0))
par(mfrow=c(10,1))
for(i in 1:10)
{
if (substr(colnames(dist.data[clad.cols[i]]),5,5)==1)
{
plot(dist.data[,clad.cols[i]], type="l", ylab=colnames(dist.data[clad.cols[i]]), xlab="", col="black")
}
else if (substr(colnames(dist.data[clad.cols[i]]),5,5)==2)
{
plot(dist.data[,clad.cols[i]], type="l", ylab=colnames(dist.data[clad.cols[i]]), xlab="", col="red")
}
else if (substr(colnames(dist.data[clad.cols[i]]),5,5)==3)
{
plot(dist.data[,clad.cols[i]], type="l", ylab=colnames(dist.data[clad.cols[i]]), xlab="", col="green")
axis(side=1, at=c(4,8,9,10,12,14,16,17,18,22,26,28,29,33,34,35,38,41,44,50,52,58),
labels=dist.data$FA_name[c(4,8,9,10,12,14,16,17,18,22,26,28,29,33,34,35,38,41,44,50,52,58)], las=2)
}
else if (substr(colnames(dist.data[clad.cols[i]]),5,5)==4)
{
plot(dist.data[,clad.cols[i]], type="l", ylab=colnames(dist.data[clad.cols[i]]), xlab="", col="blue")
}
}
par(mar=c(4,4,4,4))
par(mfrow=c(1,1))
par(mar=c(0,5,0,0))
par(mfrow=c(10,1))
for(i in 1:10)
{
if (substr(colnames(dist.data[clad.cols[i]]),5,5)==1)
{
plot(dist.data[,clad.cols[i]], type="l", ylab=colnames(dist.data[clad.cols[i]]), xlab="", col="black", xaxt="n", ylim=c(0,25))
}
else if (substr(colnames(dist.data[clad.cols[i]]),5,5)==2)
{
plot(dist.data[,clad.cols[i]], type="l", ylab=colnames(dist.data[clad.cols[i]]), xlab="", col="red", xaxt="n", ylim=c(0,25))
}
else if (substr(colnames(dist.data[clad.cols[i]]),5,5)==3)
{
plot(dist.data[,clad.cols[i]], type="l", ylab=colnames(dist.data[clad.cols[i]]), xlab="", col="green", xaxt="n", ylim=c(0,25))
axis(side=1, at=c(4,8,9,10,12,14,16,17,18,22,26,28,29,33,34,35,38,41,44,50,52,58),
labels=dist.data$FA_name[c(4,8,9,10,12,14,16,17,18,22,26,28,29,33,34,35,38,41,44,50,52,58)], las=2)
}
else if (substr(colnames(dist.data[clad.cols[i]]),5,5)==4)
{
plot(dist.data[,clad.cols[i]], type="l", ylab=colnames(dist.data[clad.cols[i]]), xlab="", col="blue", xaxt="n", ylim=c(0,25))
}
}
par(mar=c(4,4,4,4))
par(mfrow=c(1,1))
setwd("C:/Users/Mike/Desktop/Grad/Projects/Thesis/Seven Lakes Project 2014/Data/FA/PCA_arrangements")
data<-read.csv("ultimate_spreadsheet_POMandPeriCombinedLakes.csv")
########0 -functions and packages####
alldata<-read.csv("C:/Users/Mike/Desktop/Grad/Projects/Thesis/Seven Lakes Project 2014/Analysis/7lmeans.csv")
library(vioplot)
library(vegan)
library(plyr)
library(plotrix)
library(car)
#FISH560 functions
pca.eigenval <-
function(x.pca,dim=length(x.pca$sdev),digits=7){
#check for dim limit
if(dim>length(x.pca$sdev)){
cat("Only",length(x.pca$sdev),"axes available\n")
dim<-length(x.pca$sdev)
}
#calculate some variables
names<-colnames(x.pca$rotation[,1:dim])
var<-x.pca$sdev^2
trace<-sum(var)
prop.var<-var/trace
#broken-stick distribution
p<-length(x.pca$sdev)
y<-rep(0,p)
for(i in 1:p) y[i]<-1/i
for(i in 1:p) y[i]<-sum(y[i:p])
y<-y[1:dim]
#print results
cat('Importance of components:\n')
z<-rbind('Variance(eigenvalue)'=var[1:dim],
'Proportion of Variance'=prop.var[1:dim],
'Cumulative Proportion'=cumsum(prop.var[1:dim]),
'Broken-stick value'=y)
colnames(z)<-names
z<-round(z,digits=digits)
return(z)
}
pca.eigenvec <-
function(x.pca,dim=length(x.pca$sdev),
digits=7,cutoff=0){
#check for dim limit
if(dim>ncol(x.pca$rotation)){
cat("Only",ncol(x.pca$rotation),"axes available\n")
dim<-ncol(x.pca$rotation)
}
#print results
cat("\nEigenvectors:\n")
z<-format(round(x.pca$rotation[,1:dim],digits=digits))
z[abs(x.pca$rotation[,1:dim])<cutoff]<-substring('',1,nchar(z[1,1]))
z<-as.data.frame(z)
return(z)
}
pca.structure <-
function(x.pca,x,dim=length(x.pca$sdev),
digits=3,cutoff=0){
#check for dim limit
if(dim>length(x.pca$sdev)){
cat("Only",length(x.pca$sdev),"axes available\n")
dim<-length(x.pca$sdev)
}
#calculate structure correlations
z<-cor(x,x.pca$x[,1:dim])
#print results
cat("\nStructure Correlations:\n")
z<-round(z,digits=digits)
z[abs(z)<cutoff]<-substring('',1,nchar(z[1,1]))
z<-as.data.frame(z)
return(z)
}
ordi.monte <-
function(x,ord,dim=length(x),perm=1000,center=TRUE,
scale=TRUE,digits=3,plot=TRUE,col.hist='blue',col.line='red',
lty=2,las=1,lab=c(5,5,4),...){
p<-length(x)
if(dim>p){
cat("Only",p,"axes available\n")
dim<-p
}
if(ord=='pca'){
z<-prcomp(x,center=center,scale=scale) #prcomp analysis
z.eig<-z$sdev[1:dim]^2 #compute eigenvalues
z.teig<-t(z.eig) #transpose eigenvalues
z.teig<-t(matrix(z.teig,length(z.teig),perm)) #fill matrix with eigenvalues
write('',file='y.csv') #empty outfile if it exists
for(i in 1:perm){
y<-apply(x,2,sample) #permute data matrix
y<-prcomp(y,center=center,scale=scale) #prcomp on permuted matrix
y<-y$sdev[1:dim]^2 #compute eigenvalues
y<-as.data.frame(t(y)) #coerce to data frame and transpose
write.table(y,file='y.csv',sep=',',append=TRUE,row.names=FALSE,col.names=FALSE)
}
y<-read.table('y.csv',sep=',',header=FALSE) #read in permutation results
p.value<-apply(y>z.teig,2,sum) #compute proportion of random distribution smaller than observed
p.value<-p.value/perm #compute p-value
names<-colnames(z$rotation[,1:dim]) #add 'PC#' names
}
else if(ord=='ca'){
library(vegan)
z<-cca(x) #correspondence analysis
z.eig<-z$CA$eig[1:dim] #get eigenvalues
z.teig<-t(z.eig) #transpose eigenvalues
z.teig<-t(matrix(z.teig,length(z.teig),perm)) #fill matrix with eigenvalues
write('',file='y.csv') #empty outfile if it exists
for(i in 1:perm){
y<-apply(x,2,sample) #permute data matrix
y<-cca(y) #CA on permuted matrix
y<-y$CA$eig[1:dim] #get eigenvalues
y<-as.data.frame(t(y)) #coerce to data frame and transpose
write.table(y,file='y.csv',sep=',',append=TRUE,row.names=FALSE,col.names=FALSE)
}
y<-read.table('y.csv',sep=',',header=FALSE) #read in permutation results
p.value<-apply(y>z.teig,2,sum) #compute proportion of random distribution smaller than observed
p.value<-p.value/perm #compute p-value
names<-names(z$CA$eig[1:dim]) #add 'CA#' names
}
else if(ord=='dca'){
library(vegan)
if(dim>4){
cat("Only",4,"axes available\n")
dim<-4
}
z<-decorana(x,...) #detrended correspondence analysis
z.eig<-z$evals[1:dim] #get eigenvalues
z.teig<-t(z.eig) #transpose eigenvalues
z.teig<-t(matrix(z.teig,length(z.teig),perm)) #fill matrix with eigenvalues
write('',file='y.csv') #empty outfile if it exists
for(i in 1:perm){
y<-apply(x,2,sample) #permute data matrix
y<-decorana(y,...) #DCA on permuted matrix
y<-y$evals[1:dim] #get eigenvalues
y<-as.data.frame(t(y)) #coerce to data frame and transpose
write.table(y,file='y.csv',sep=',',append=TRUE,row.names=FALSE,col.names=FALSE)
}
y<-read.table('y.csv',sep=',',header=FALSE) #read in permutation results
p.value<-apply(y>z.teig,2,sum) #compute proportion of random distribution smaller than observed
p.value<-p.value/perm #compute p-value
names<-names(z$eval[1:dim]) #add 'CA#' names
}
if(plot==TRUE){
for(i in 1:dim){
xmin<-min(min(y[[i]],z.eig[i]))
xmax<-max(max(y[[i]],z.eig[i]))
hist(y[[i]],col=col.hist,las=las,lab=lab,
xaxs='i',yaxs='i',xlim=c(xmin,xmax),
xlab='Eigenvalue',
main=paste('Random Permutation Distribution of Eigenvalues for',names[i],sep=' '),...)
abline(v=z.eig[i],col=col.line,lty=lty,lwd=2,...)
readline("Press return for next plot ")
}
}
cat('Randomization Test of Eigenvalues:\n')
z<-rbind('Eigenvalue'=z.eig,'P-value'=p.value)
colnames(z)<-names
z<-round(z,digits=digits)
return(z)
}
########8 - PCA and HCA functions, etc. (Method 3 of 3) - NEED THIS TO RUN ALL PCAS and HCAs####
#combined POM and peri samples in Excel
# IDs<-c("i001215", "i002215", "i003103", "i004103", "i006303", "i007203", "i008403", "i009403", "i010403", "i011203", "i012203", "i013103",
#        "i090120", "i092120", "i108303", "i094120", "i085220", "i086220", "i087220", "i080317", "i096120", "i081301", "i082320", "i083420", "i084401",
#        "i093101", "i105320", "i106317", "i097101", "i091101", "i095101", "i017111", "i000504", "i000508", "i071109", "i000514", "i109107")
# colnames(data)[16:52]<-IDs
#identify columns for each sample type
cal.cols<-grep("20", substr(colnames(data),6,7))
clad.cols<-grep("01", substr(colnames(data),6,7))
caddis.cols<-grep("03", substr(colnames(data),6,7))
chaob.cols<-grep("17", substr(colnames(data),6,7))
fish.cols<-grep("15", substr(colnames(data),6,7))
POM.cols<-grep("08", substr(colnames(data),6,7))
peri.cols<-grep("04", substr(colnames(data),6,7))
fil.cols<-grep("11", substr(colnames(data),6,7))
moss.cols<-grep("07", substr(colnames(data),6,7))
soil.cols<-grep("09", substr(colnames(data),6,7))
plant.cols<-grep("14", substr(colnames(data),6,7))
#replace NAs with small value (for frequency distribution plots)
dist.data<-data
for (i in 1:length(dist.data[1,16:52]))
{
for (j in 1:length(dist.data[,16]))
{
if (is.na(dist.data[,16:52][j,i])==T)
{
dist.data[,16:52][j,i]<-0.000001
}
}
}
short_SAFA<-data[data$short_SAFA==1,c(1:5, cal.cols)]
short_SAFA<-colSums(short_SAFA[,6:15], na.rm=T)
iSAFA_etc<-data[data$iSAFA_etc==1,c(1:5, cal.cols)]
iSAFA_etc<-colSums(iSAFA_etc[,6:15], na.rm=T)
other_MUFA<-data[data$other_MUFA==1,c(1:5, cal.cols)]
other_MUFA<-colSums(other_MUFA[,6:15], na.rm=T)
LIN<-data[data$LIN==1,c(1:5, cal.cols)]
LIN<-colSums(LIN[,6:15], na.rm=T)
other_n3_n6_PUFA<-data[data$other_n3_n6_PUFA==1,c(1:5, cal.cols)]
other_n3_n6_PUFA<-colSums(other_n3_n6_PUFA[,6:15], na.rm=T)
OA_16.4n3<-data[data$OA_16.4n3==1,c(1:5, cal.cols)]
OA_16.4n3<-colSums(OA_16.4n3[,6:15], na.rm=T)
ALA_SDA<-data[data$ALA_SDA==1,c(1:5, cal.cols)]
ALA_SDA<-colSums(ALA_SDA[,6:15], na.rm=T)
long_SAFA<-data[data$long_SAFA==1,c(1:5, cal.cols)]
long_SAFA<-colSums(long_SAFA[,6:15], na.rm=T)
EPA_DHA<-data[data$EPA_DHA==1,c(1:5, cal.cols)]
EPA_DHA<-colSums(EPA_DHA[,6:15], na.rm=T)
other_PUFA<-data[data$other_PUFA==1,c(1:5, cal.cols)]
other_PUFA<-colSums(other_PUFA[,6:15], na.rm=T)
#grouping combination 1 (all)
cal.grouped<-rbind(short_SAFA, iSAFA_etc, other_MUFA, LIN, other_n3_n6_PUFA, OA_16.4n3,
ALA_SDA, long_SAFA, EPA_DHA, other_PUFA)
#grouping 2 (removed "other_MUFA" and "Other PUFA")
# cal.grouped<-rbind(short_SAFA, iSAFA_etc, LIN, other_n3_n6_PUFA, OA_16.4n3,
#                ALA_SDA, long_SAFA, EPA_DHA)
#modify the grouped data for PCA (arcsin sqrt transform and missing data replacement)
for (i in 1:length(cal.grouped[1,]))
{
for (j in 1:length(cal.grouped[,1]))
{
#replace zeros with small values
if (cal.grouped[j,i]==0)
{
cal.grouped[j,i]<-0.000001
}
#put data on proportional scale (0-1) and arc-sin square root transform them
cal.asin.grouped<-cal.grouped
cal.asin.grouped[j,i]<-asin(sqrt(cal.asin.grouped[j,i]/100))*(2/pi)
}
}
#format data for PCA
tcal.asin.grouped<-t(as.matrix(cal.asin.grouped))
#perform PCA and associated tests
cal.pca<-prcomp(tcal.asin.grouped,scale=T, scores=T)
#determine eigenvalues
eigenvalues<-pca.eigenval(cal.pca)
#see which eigenvalues are significant
screeplot(cal.pca, bstick=T)
#see loadings.  square these to get percentage of variance in each original variable
#accounted for by each principal component
structure<-pca.structure(cal.pca,tcal.asin.grouped,dim=7,cutoff=0.2)
#sample scores
sample.scores<-cal.pca$x[,1:7]
#create matrix of other covariates organized so that they can be used as cex values in the plot
cal.indexed.covariates<-matrix(NA, nrow=length(row.names(tcal.asin.grouped)), ncol=41)
for (i in 1:length(cal.indexed.covariates[1,]))
{
for (j in 1:length(row.names(tcal.asin.grouped)))
{
#read lake_ID(but not class) off alldata and match it to lake ID in the indexed covariates
cal.indexed.covariates[j,i]<-alldata[1:11,i][substr(alldata$lake_ID_andClass[1:11],1,2)==(as.numeric(substr(row.names(tcal.asin.grouped),8,9))[j])]
}
}
cal.indexed.covariates<-as.data.frame(cal.indexed.covariates)
colnames(cal.indexed.covariates)<-colnames(alldata)
cal.indexed.covariates[,1]<-c("C", "O", "Z", "Mirror", "Y025", "Y015", "L", "Clear", "Morgenroth", "Milk")
for(i in 3:length(cal.indexed.covariates[1,]))
{
plot(cal.indexed.covariates$calanoidd13c, cal.indexed.covariates$calanoidd15n, cex=rescale(cal.indexed.covariates[,i], c(2,15)),
main=paste(colnames(cal.indexed.covariates)[i]), col=substr(cal.indexed.covariates$lake_ID_andClass,3,3), pch=20, ylim = c(1,5),
xlab = "Calanoid d13C", ylab = "Calanoid d15N")
text(x = cal.indexed.covariates$calanoidd13c, y = cal.indexed.covariates$calanoidd15n + 0.4, labels = cal.indexed.covariates$lake)
legend("topright", legend=c("puddles", "high", "milk+clear", "big"),
fill=c(1, 2, 3, 4))
}
setwd("C:/Users/Mike/Desktop/Grad/Projects/Thesis/Seven Lakes Project 2014/Data/FA/daphnia_culturing")
mort<-read.csv("C:/Users/Mike/Desktop/Grad/Projects/Thesis/Seven Lakes Project 2014/Data/FA/daphnia_culturing/mortality_data.csv")
View(mort)
barplot(mort$meandead.day)
mort<-read.csv("C:/Users/Mike/Desktop/Grad/Projects/Thesis/Seven Lakes Project 2014/Data/FA/daphnia_culturing/mortality_data.csv")
View(mort)
barplot(mort$meandead.day, labels=mort$treatment)
barplot(mort$meandead.day, names.arg=mort$treatment)
barplot(mort$meandead_per_day, names.arg=mort$treatment)
error.bars(mort$meandead_per_day, lower=mort_stdev_dead)
error.bars <- function(x, y, upper, lower=upper, cap.length=0.1, horiz=F,...){
error.bars <- function(x, y, upper, lower=upper, cap.length=0.1, horiz=F,...){
if(length(x) != length(y) | length(y) !=length(lower) | length(lower) != length(upper))
stop("One or more vectors is not the same length")
if(horiz==F) {
arrows(x,y+upper, x, y-lower, angle=90, code=3, length=cap.length, ...)
} else if (horiz==T) {
arrows(x+upper,y, x-lower, y, angle=90, code=3, length=cap.length, ...)
}
}
# look for interactions among all variables (include d13c of zoops and caddis)
# library(car)
# scatterplotMatrix(data[,c(2,4,6,7,8,13,14,15,24,25,27,28,29)], reg.line=T, smooth=F, pch="*", spread=T, diagonal='density', id.n=0, span=0.5)
# scatterplotMatrix(data[,c(4,6,7,8,13,18,24,27)], reg.line=T, smooth=F, pch="*", spread=T, diagonal='density', id.n=0, span=0.5)
# round(cor(data[,c(20,4,6,7,8,13,24,27)], use="complete.obs"),2)
# round(cor(data[,c(16,18,20,2,4,6,7,8,13,14,15,24,25,27,28,29)], use="complete.obs"),2)
# plot pCO2 versus DOC, see if the double-trend in the DOC-d13C plot can be explained that way
# or
error.bars(mort$meandead_per_day, lower=mort_stdev_dead)
error.bars(mort$meandead_per_day, upper=mort_stdev_dead)
error.bars <- function(x, y, upper, lower=upper, cap.length=0.1, horiz=F,...){
if(length(x) != length(y) | length(y) !=length(lower) | length(lower) != length(upper))
stop("One or more vectors is not the same length")
if(horiz==F) {
arrows(x,y+upper, x, y-lower, angle=90, code=3, length=cap.length, ...)
} else if (horiz==T) {
arrows(x+upper,y, x-lower, y, angle=90, code=3, length=cap.length, ...)
}
}
error.bars(mort$meandead_per_day, upper=mort_stdev_dead)
error.bars(x=1:5, y=mort$meandead_per_day, upper=mort_stdev_dead)
error.bars(x=1:5, y=mort$meandead_per_day, upper=mort$stdev_dead)
mort<-read.csv("C:/Users/Mike/Desktop/Grad/Projects/Thesis/Seven Lakes Project 2014/Data/FA/daphnia_culturing/mortality_data.csv")
error.bars(x=1:5, y=mort$meandead_per_day, upper=mort$stdev_dead)
barplot(mort$meandead_per_day, names.arg=mort$treatment)
error.bars(x=1:5, y=mort$meandead_per_day, upper=mort$stdev_dead)
error.bars(y=mort$meandead_per_day, upper=mort$stdev_dead)
mortplot<-barplot(mort$meandead_per_day, names.arg=mort$treatment)
error.bars(x=mortplot, y=mort$meandead_per_day, upper=mort$stdev_dead)
mortplot<-barplot(mort$meandead_per_day, names.arg=mort$treatment, ylim=c(0,17))
error.bars(x=mortplot, y=mort$meandead_per_day, upper=mort$stdev_dead)
mortplot<-barplot(mort$meandead_per_day, names.arg=mort$treatment, ylim=c(0,20))
error.bars(x=mortplot, y=mort$meandead_per_day, upper=mort$stdev_dead)
mortplot<-barplot(mort$meandead_per_day, names.arg=mort$treatment, ylim=c(0,20), ylab="# dead per 20 per day")
mortplot<-barplot(mort$percap_meandead_per_day, names.arg=mort$treatment, ylim=c(0,20), ylab="# dead per 20 per day")
mort<-read.csv("C:/Users/Mike/Desktop/Grad/Projects/Thesis/Seven Lakes Project 2014/Data/FA/daphnia_culturing/mortality_data.csv")
View(mortplot)
View(mort)
View(mort)
mort<-read.csv("C:/Users/Mike/Desktop/Grad/Projects/Thesis/Seven Lakes Project 2014/Data/FA/daphnia_culturing/mortality_data.csv")
View(mort)
mortplot<-barplot(mort$percap_meandead_perday, names.arg=mort$treatment, ylim=c(0,20), ylab="# dead per 20 per day")
mortplot<-barplot(mort$percap_meandead_perday, names.arg=mort$treatment, ylab="# dead per 20 per day")
mortplot<-barplot(mort$percap_meandead_perday, names.arg=mort$treatment, ylab="percap dead per visit")
error.bars(x=mortplot, y=mort$percap_meandead_perday, upper=mort$percap_stdevdead_perday)
mortplot<-barplot(mort$percap_meandead_perday, names.arg=mort$treatment, ylim=c(0,1), ylab="percap dead per visit")
error.bars(x=mortplot, y=mort$percap_meandead_perday, upper=mort$percap_stdevdead_perday)
mortplot<-barplot(mort$percap_meanharvest_perday, names.arg=mort$treatment, ylim=c(0,1), ylab="percap harvest per visit")
error.bars(x=mortplot, y=mort$percap_meanharvest_perday, upper=mort$percap_stdevharvest_perday)
